@page "/cart"
@rendermode InteractiveServer
@using System.Text.Json;
@using System.Text.Json.Serialization;
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
@if (cart.Count == 0)
{
    <div style="display:flex;justify-content:center;text-align:center;">
        <h1>Корзина пуста:</h1>
    </div>
}
else{
    <div style="display:flex;justify-content:center;text-align:center;">
        <h1>Моя корзина:</h1>
    </div>

<div style="display:flex;justify-content:center;text-align:center;">    
    <div style="display:flex;justify-content:center;width:60%;margin-top:30px;">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col"></th>
                    <th scope="col">Бренд</th>
                    <th scope="col">Цвет</th>
                    <th scope="col">Размер</th>
                    <th scope="col">Цена</th>
                    <th scope="col">Количество</th>
                        <th scope="col"></th>
                    <th scope="col"></th>
                        
                     
                </tr>
            </thead>
            <tbody>
                @foreach (var elCart in @cart)
                {
                    <tr class="table-light">
                            <td><img src="@elCart.UrlImg" style="width:100px;height:100px" class="card-img-top" alt="..."></td>
                        <td>@elCart.Brand</td>
                        <td>@elCart.Color</td>
                        <td >@elCart.Size</td>
                        <td>@elCart.Price</td>
                            <td>
                                <button class="btn btn-outline-success" @onclick="()=>Decrement(elCart)" style="margin-right:5px">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-dash-lg" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z" />
                                    </svg>
                                </button>
                                @elCart.CountProduct
                                <button class="btn btn-outline-success" @onclick="()=>Increment(elCart)" style="margin-left:5px">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-lg" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z" />
                                    </svg>
                                </button></td>
                         
                        <td><button style="width:80px;" class="btn btn-danger" @onclick="()=>DeleteCart(elCart.Id)">
                                    <span>
                                        <svg xmlns="http://www.w3.org/2000/svg" width="25" height="20" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                            <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                                        </svg>
                                    </span>
                            </button></td>                          

                    </tr>
                }               
            </tbody>
        </table>        

    </div>


       

</div>
    <div style="display:flex;justify-content:center;text-align:center;">
        <div style="display:flex;justify-content:space-between;text-align:center;width:57%;">
            <div>
            </div>

            <div>
                <button class="btn btn-primary" @onclick="AddOrder">Оформить</button>
            </div>
        </div>

    </div>
  
    <div style="display:flex;justify-content:center;text-align:center;">
        <div style="display:flex;justify-content:space-between;text-align:center;width:60%;">
            <div>
                <h2>К оплате:</h2>
            </div>
           
            <div>
                <h2>   @cart.Select(s => s.Price*s.CountProduct).Sum() руб. ;</h2>
            </div>
        </div>
      
       
</div>
   
   
   
}
@code {
    List<Model.ShopingCart> cart = new List<Model.ShopingCart>();
    string ?jsonStr;
    async void DeleteCartAll()
    {
        var options = new DbContextOptionsBuilder<BoxingShop.ContextDB.AppContext>().UseSqlite("Data Source=Shop.db").Options;
        using (var dbContext = new BoxingShop.ContextDB.AppContext(options))
        {

            dbContext.Carts.ExecuteDelete();
            dbContext.SaveChanges();
            await LoadCarts();

        }

    }
    async Task AddOrder()
    {
        var options = new DbContextOptionsBuilder<BoxingShop.ContextDB.AppContext>().UseSqlite("Data Source=Shop.db").Options;
        using (var dbContext = new BoxingShop.ContextDB.AppContext(options))
        {
            await LoadCarts();
            jsonStr = JsonSerializer.Serialize(cart);
            Model.Order order = new Model.Order ( ) ;
            order.OrderSum = cart.Select(s => s.Price * s.CountProduct).Sum();
            order.JsonOrder = jsonStr;
            dbContext.Add(order);
            await dbContext.SaveChangesAsync();

        }
        DeleteCartAll();

    } 
    async Task LoadCarts()
    {
        var options = new DbContextOptionsBuilder<BoxingShop.ContextDB.AppContext>().UseSqlite("Data Source=Shop.db").Options;
        using (var dbContext = new BoxingShop.ContextDB.AppContext(options))
        {
            cart = await dbContext.Carts.ToListAsync();
           
        }

    }
    protected override async Task OnInitializedAsync()
    {
        await LoadCarts();


    }
    async void DeleteCart(int CartId)
    {
        var options = new DbContextOptionsBuilder<BoxingShop.ContextDB.AppContext>().UseSqlite("Data Source=Shop.db").Options;
        using (var dbContext = new BoxingShop.ContextDB.AppContext(options))
        {
            var findeCart = dbContext.Carts.FirstOrDefault(t => t.Id == CartId);
            if (findeCart != null)
            {
                dbContext.Carts.Remove(findeCart);
                dbContext.SaveChanges();
                await LoadCarts();
            }
        }

    } 
    async Task Increment(Model.ShopingCart elCart)
    {
        var options = new DbContextOptionsBuilder<BoxingShop.ContextDB.AppContext>().UseSqlite("Data Source=Shop.db").Options;
        using (var dbContext = new BoxingShop.ContextDB.AppContext(options))
        {
            var findeCart = dbContext.Carts.FirstOrDefault(t => t.Id == elCart.Id);
            if (findeCart != null)
            {
                findeCart.Brand = findeCart.Brand;
                findeCart.Color = findeCart.Color;
                findeCart.Size = findeCart.Size;
                findeCart.Price = findeCart.Price;
                findeCart.UrlImg = findeCart.UrlImg;
                findeCart.CountProduct = findeCart.CountProduct + 1;
                dbContext.Carts.Update(findeCart);
                await dbContext.SaveChangesAsync();              
                await LoadCarts();
            }
        }
       
    }
    async Task Decrement(Model.ShopingCart elCart)
    {
        var options = new DbContextOptionsBuilder<BoxingShop.ContextDB.AppContext>().UseSqlite("Data Source=Shop.db").Options;
        using (var dbContext = new BoxingShop.ContextDB.AppContext(options))
        {
            var findeCart = dbContext.Carts.FirstOrDefault(t => t.Id == elCart.Id);
            if (findeCart != null)
            {
                findeCart.Brand = findeCart.Brand;
                findeCart.Color = findeCart.Color;
                findeCart.Size = findeCart.Size;
                findeCart.Price = findeCart.Price;
                findeCart.UrlImg = findeCart.UrlImg;
                findeCart.CountProduct = findeCart.CountProduct - 1;
                if (findeCart.CountProduct == 0)
                {

                    dbContext.Carts.Remove(findeCart);
                    dbContext.SaveChanges();
                    await LoadCarts();
                    return;

                }
                dbContext.Carts.Update(findeCart);
                await dbContext.SaveChangesAsync();
                await LoadCarts();
            }
        }
   

    }
}
